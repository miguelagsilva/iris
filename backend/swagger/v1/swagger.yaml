openapi: 3.1.0
info:
  title: Iris API
  description: |-
    This is the REST API design based on the OpenAPI standard
  version: 1.0.0
servers:
  - url: https://localhost:3000/
tags:
  - name: organizations
  - name: groups
  - name: users
paths:
  /api/v1/organizations:
    post:
      tags:
        - organizations
      summary: Create a new organization
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationInput"
        required: true
      responses:
        "201":
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - bearerAuth: []
    get:
      tags:
        - organizations
      summary: Get all existing organizations
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/NameFilterParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/OrderParam"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedOrganizations"
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
            X-RateLimit-Remaining:
              schema:
                type: integer
      security:
        - bearerAuth: []

  /api/v1/organizations/{organizationId}:
    get:
      tags:
        - organizations
      summary: Get organization by ID
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: []
    put:
      tags:
        - organizations
      summary: Edit an organization
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
      requestBody:
        description: New organization details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationInput"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - bearerAuth: []
    patch:
      tags:
        - organizations
      summary: Partially update an organization
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
      requestBody:
        description: Fields to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationPatch"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - bearerAuth: []
    delete:
      tags:
        - organizations
      summary: Delete an organization
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
      responses:
        "204":
          description: Successfully deleted
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: []

  /api/v1/organizations/{organizationId}/users:
    get:
      tags:
        - organizations
      summary: Get all users in an organization
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/NameFilterParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/OrderParam"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedOrganizationUsers"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: []
    post:
      tags:
        - organizations
      summary: Add a user to an organization
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationUserInput"
      responses:
        "201":
          description: Successfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationUser"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - bearerAuth: []

  /api/v1/organizations/{organizationId}/users/{userId}:
    put:
      tags:
        - organizations
      summary: Edit a user in an organization
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
        - $ref: "#/components/parameters/UserIdParam"
      requestBody:
        description: New user organization details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationUserInput"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
    delete:
      tags:
        - organizations
      summary: Removes a user from an organization
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        "204":
          description: Successfully deleted
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: []

  /api/v1/organizations/{organizationId}/groups:
    get:
      tags:
        - groups
      summary: Get all groups in an organization
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/NameFilterParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/OrderParam"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedGroups"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: []
    post:
      tags:
        - groups
      summary: Create a new group in an organization
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupInput"
      responses:
        "201":
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - bearerAuth: []
  /api/v1/organizations/{organizationId}/groups/{groupId}:
    get:
      tags:
        - groups
      summary: Get a specific group in an organization
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
        - $ref: "#/components/parameters/GroupIdParam"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: []
    put:
      tags:
        - groups
      summary: Update a group in an organization
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
        - $ref: "#/components/parameters/GroupIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupInput"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - bearerAuth: []
    patch:
      tags:
        - groups
      summary: Partially update a group in an organization
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
        - $ref: "#/components/parameters/GroupIdParam"
      requestBody:
        description: Fields to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupPatch"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - bearerAuth: []
    delete:
      tags:
        - groups
      summary: Delete a group from an organization
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
        - $ref: "#/components/parameters/GroupIdParam"
      responses:
        "204":
          description: Successfully deleted
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: []

  /api/v1/organizations/{organizationId}/groups/{groupId}/users:
    get:
      tags:
        - groups
      summary: Get all users in a group
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
        - $ref: "#/components/parameters/GroupIdParam"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/NameFilterParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/OrderParam"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedGroupUsers"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: []
    post:
      tags:
        - groups
      summary: Add a user to a group in an organization
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
        - $ref: "#/components/parameters/GroupIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupUserInput"
      responses:
        "201":
          description: Successfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupUser"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - bearerAuth: []
  /api/v1/organizations/{organizationId}/groups/{groupId}/users/{userId}:
    delete:
      tags:
        - groups
      summary: Remove a user from a group in an organization
      parameters:
        - $ref: "#/components/parameters/OrganizationIdParam"
        - $ref: "#/components/parameters/GroupIdParam"
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        "204":
          description: Successfully removed
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: []

  /api/v1/users:
    post:
      tags:
        - users
      summary: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
        required: true
      responses:
        "201":
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - bearerAuth: []
    get:
      tags:
        - users
      summary: Get all users
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/NameFilterParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/OrderParam"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedUsers"
      security:
        - bearerAuth: []

  /api/v1/users/{userId}:
    get:
      tags:
        - users
      summary: Get user by ID
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: []
    put:
      tags:
        - users
      summary: Update a user
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - bearerAuth: []
    patch:
      tags:
        - users
      summary: Partially update a user
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      requestBody:
        description: Fields to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPatch"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - bearerAuth: []
    delete:
      tags:
        - users
      summary: Delete a user
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        "204":
          description: Successfully deleted
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - bearerAuth: []
  /api/v1/users/{userId}/organizations:
    get:
      tags:
        - users
      summary: Get users organizations
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/NameFilterParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/OrderParam"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedOrganizations"
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
            X-RateLimit-Remaining:
              schema:
                type: integer
      security:
        - bearerAuth: []

components:
  parameters:
    IdParam:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    OrganizationIdParam:
      name: organizationId
      schema:
        $ref: "#/components/parameters/IdParam"
    GroupIdParam:
      name: groupId
      schema:
        $ref: "#/components/parameters/IdParam"
    UserIdParam:
      name: userId
      schema:
        $ref: "#/components/parameters/IdParam"
    PageParam:
      name: page
      in: query
      schema:
        type: integer
        default: 1
    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        default: 20
    NameFilterParam:
      name: name
      in: query
      schema:
        type: string
    SortByParam:
      name: sortBy
      in: query
      schema:
        type: string
        enum: [name, createdAt]
        default: name
    OrderParam:
      name: order
      in: query
      schema:
        type: string
        enum: [asc, desc]
        default: desc

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        organizationId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - organizationId

    GroupInput:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    GroupPatch:
      type: object
      properties:
        name:
          type: string
        organizationId:
          type: string
          format: uuid

    GroupUser:
      type: object
      properties:
        groupId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        role:
          type: string
          enum: [member, admin]
      required:
        - groupId
        - userId
        - role

    GroupUserInput:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        role:
          type: string
          enum: [member, admin]
      required:
        - userId
        - role

    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name

    OrganizationInput:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    OrganizationPatch:
      type: object
      properties:
        name:
          type: string

    OrganizationUser:
      type: object
      properties:
        organizationId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        role:
          type: string
          enum: [member, admin]
        user:
          $ref: "#/components/schemas/User"
      required:
        - organizationId
        - userId
        - role

    OrganizationUserInput:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        role:
          type: string
          enum: [member, admin]
      required:
        - userId
        - role

    PaginatedGroups:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Group"
        totalCount:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        nextPage:
          type: string
          nullable: true
        prevPage:
          type: string
          nullable: true

    PaginatedGroupUsers:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/GroupUser"
        totalCount:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        nextPage:
          type: string
          nullable: true
        prevPage:
          type: string
          nullable: true

    PaginatedOrganizations:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Organization"
        totalCount:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        nextPage:
          type: string
          nullable: true
        prevPage:
          type: string
          nullable: true

    PaginatedOrganizationUsers:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrganizationUser"
        totalCount:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        nextPage:
          type: string
          nullable: true
        prevPage:
          type: string
          nullable: true

    PaginatedUsers:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/User"
        totalCount:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        nextPage:
          type: string
          nullable: true
        prevPage:
          type: string
          nullable: true

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - username
        - email

    UserInput:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - username
        - email
        - password

    UserPatch:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
